- whenever there are changes made in .env, manually restart the server, nodemon doesn't work.

process.env.PORT
--> access env variables in nodejs for configuring port on which a server should listen
why? --> deployment flexibilty --> config mgmnt
-->When developing web apps, best to configure the server to listen on a port defined by an env variable. This allows flexibility, avoids hardcoding the port number.

can also store process.env.PORT in any variable and use
--------------------------------------------------------------------------------------------------------------------------
replacement of this written in index.js page, mongodb connection point.

APPROACH 1: using try catch for error handling and using async await...
import express from "express";
const app = express();
(async () => {
  try {
    await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
    app.on("error", (error) => {
        console.log("ERRR: ", error)
        throw error
    })

    app.listen(process.env.PORT, () => {
        console.log(`App is listening on port ${process.env.PORT}`);
    })

  } catch (error) {
    console.log("Error: ", error);
    throw err;
  }
})();

--------------------------------------------------------------------------------------------------------------------------


request can be used to extract plenty of info.
req.params ---> url data extraction
req.body ---> data in forms, json etc..
data can be accessed through even cookies.
when using cookie-parser middleware, this prop is an obj containing cookies sent by req.
cookie-parser need to be installed through npm package --> npm i cookie-parser ---> require('cookie-parser') / import

CORS package ---> enable to make settings [cross-origin-resource-sharing] ---> npm i cors --> require/import
app.use(cors()) --> origin, credentials etc..
for middleware / config settings ----> app.use() ***

---------------------------------/* important configurations of express */ -----------------------------------------------
app.use(express.json({
    limit: "16kb" ---> server power
})) --> configuring json and accepting
app.use(express.urlencoded({ extended: true, limit: "16kb" }));
extended:true ---> nesting enabled in objects
app.use(express.static("public")); ---> to store files and folders in [public], which is accessible to anyone. [public]

app.use(cookie-parser())
cookie-parser imported ---> so that through we can access cookies and set cookies in user's browser 
--------------------------------------------------------------------------------------------------------------------------
middleware ---> functionality between req and res cycle.
res returns only if middleware execution is successfull else req is reverted.
for example: /instagram -----> middleware ------> res.send("sathwik")
the middleware can check things like ----> if user is logged in / check if user is admin 
middleware can be more than one... order of middleware declaration decides their order of execution
middleware has 3 params ---> (req, res, next)
"next" ---> used to execute the next middleware if written else discard.

statusCode --> info responses (100 - 199)
--> successfull response ( 200 - 299)
--> redirection response ( 300 - 399 )
--> client error response (400 - 499)
--> Server error response (500 - 599)
----------------------------------------------------------------------------------------------------------------------
Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err));
--> this line.. is used to ensure that result of reqhandler is treated as promise. this req handler can be an async function that returns a promise or sync function 
--> if reqhandler throws an error/returns rejected promise, error is passed to next function.

Error.captureStackTrace(this, this.constructor);
--> error.captureStackTrace is method available in V8 engine, allows u to capture stack trace at a specific point and customize stack trace.
-->
----------------------------------------------------------------------------------------------------------------------
(optimal way)in Mongodb, if any field should be made searchable ---> make index: true;
but donot use index in every field, use it wisely

(npm package)mongoose-aggregate-paginate-v2 --> allows to write aggregation queries.

mongoose allows to write your own plug-ins using schemaName.plugin()
----------------------------------------------------------------------------------------------------------------------
bcrypt -->library made on core nodejs packages --> helps you to hash your password
bcyrpjs --> optimized in plain JS with 0 dependencies, compatible with bcrypt 

JWT - Json web token --> tokens are made which are not human readable using cryptic algorithm
three parts --> headers(algo and token type), payload(data), verify signature
example: header
{
    "alg": "HS256",
    "typ": "JWT"
}
above header is turned into ---> eyHnHSDJNnsnfhjjsnHSDFHNjbdfXCVJ9
example: payload (data)
{
    "name": "sai",
    "iat": 1516239022
}
above data is encrypted as eyJzdWIi0iTxMjM0NTY3ODKwiJIhiwINNKNSF39hHJFJ82IYFQ
example: verify signature
HMACSHA256(
    base64UrlEncode(header) + "." +
    base64UrlEncode(payload),
    your-256-bit-secret
) secret base64 encoded
above "secret" is the one that makes every token unique, else anyone could decode the algo. [secret=protection]

How to encrypt now?
import jwt and bcrypt
direct encryption not possible, so take help of hooks of mongoose
"pre hook" --> middleware, run just before saving the data, so select "save" in userSchema.pre("save")
userSchema.pre("event", callback function);
callback function should have param next, coz its a middleware.
"next()" should be called to pass on to the next middleware.
----------------------------------------------------------------------------------------------------------------------
ENCRYPTING the PASSWORD (check "user.model.js" file for code)
issue:
userSchema.pre("save", async function (next) {
  this.password = bcrypt.hash(this.password, 10);
  next();
});
whenever the data is saved, the password also keeps on saving/changing, problem is entire password field's access is there with encrypt function, so it keeps on running the encrypt function.
solution:
So, make sure, you set the functionality such that encryption function runs only when password field is modified directly by user.
include --> if (!this.isModified("password")) return next();
this means that if password is not modified then go on with next()
else if its modified --> then go on with bcrypt.hash and then next()
---> check user.model.js
----------------------------------------------------------------------------------------------------------------------
methods can be created in mongoose

password comparison using "bcrypt" [true/false]
adding property "isPasswordCorrect"
userSchema.methods.isPasswordCorrect = async func(pass) {
    return await bcrypt.compare(pass, this.pass)
}
using await because takes time.
pass --> string data, this.pass --> encrypted string data
result is true/false format
----------------------------------------------------------------------------------------------------------------------
JWT is a bearer token, means its like a key to database.
whoever bears this token, is granted the access of database.
jwt tokens --> private key, expiry duration

access token expiry less than refresh token expiry
access token will not be stored in database but refresh token will be stored in database

refreshToken has less information due to frequent refreshes

jwt.sign() used to synchronously convert given payload to Json webtoken payload.

writing accesstokengenerator using jwt.sign()
writing refreshtokengenerator using jwt.sign()
----------------------------------------------------------------------------------------------------------------------
file handling --> backend engineer's work.
file upload --> seperate utility function, resusable

user upload file using multer and keep in local server
use cloudinary pick file from local storage and then put it on server.
if file uploaded, remove it from server.

code in cloudinary.js --> reusable --> save it

fs --> file system in nodejs--> read, write, remove and all other operations on file [Async/sync]
fsPromises.unlink(path) --> if path refers to symbolic link, then link is removed without affecting file or dir its refering to. removing the link referred by path, without impacting the rest of the file/directory.
path... string or buffer or url
returns... promise (undefined if success)

cloudinary details in ".env" file
store cloud name, api key , api secret in .env file and get them using process.env.cloudname/apikey/apisecret.
to upload file on cloudinary --> cloudinary.uploader.upload(filepath, { ... any fields in key:value format } )

creating middleware using multer
import multer from "multer";
const upload = multer({ dest: '/uploads/' })
app.post('/profile', upload.single('avatar'), funcX(req, res, next) {
    //code... single photo
})
here we can use -->  upload.array('photos', 12) for array of photos
 ---> upload.fields( [ { key1:"value1", key2:"value2" } ] )
 so the funcn between '/path' and handlerfunc funcX is middleware....

check out multer.middleware.js file for **
-----------------------------------------------------------------------------------------------------------------------------

ROUTER AND CONTROLLER WITH DEBUGGING


====> refer app.js and user.routes.js

app.use("/api/v1/users", userRouter) ---> in app.js

router.route("/register").post(userRegister); ---> user.routes.js

in the url localhost:8000/users/......./
....... after /api/v1/users/ the next part of "url" accessed from user.routes.js
localhost:8000/api/v1/users/register ---> /users accessed in app.use in app.js
/users when accessed, sends us to route userRouter that is user.routes.js
now here sub-routes written like /registers, /login which in-turn refer controller methods for further interaction.
example: router.route("/register").post(registerUser);
registerUser written in controller


when you export like this ---> export { funcName },---> then import it also import { funcName } from "..path" 
when you export like this ---> export default funcName ----> then you can import ---> import "nameofyourchoice" from "path"

-----------------------------------------------------------------------------------------------------------------------------


in user.routes.js

  upload.fields([
    {
      name: "avatar",
      maxCount: 1,
    },
    {
      name: "coverImage",
      maxCount: 1,
    },
  ]),

upload.fields ----> method provided by multer that allows handling multiple file fields. takes an array of objects.
name:avatar, maxCount:1 ---> this config tells the middleware to handle file name field "avatar" and allows max 1 file for this field.
same goes with coverImage config.


VALIDATING GIVEN USERNAME AND EMAIL :

at user.controller.js
check each field of array and trim the whitespaces and even after trimming the whitespaces if field is empty then error.
some checks if at least one element passes the provided test
trim removes whitespaces from both ends of string.
if (
  [fullName, email, username, password].some((field) => field?.trim() === "")
) {
  throw new ApiError(400, "All fields are required");
}

at user.controller.js
.findOne() is a query method provided by ORM library to find a single docx in DB that matches specified criteria.
$or -- logical OR operation.
checking if given criteria is found in db, if its found then throw an error.

at user.controller.js
const avatarLocalPath = req.files?.avatar[0]?.path;
req.files ---> access the files uploaded through multer
req.files? ---> if the req does not have files property, expression doesnot throw error, instead evaluates it to undefined.
req.files?.avatar ---> if req.files doesnt exist or null or undefined, accessing avatar doesnot throw error, but evaluates to undefined.
req.files?.avatar[0] ---> if req.files?.avatar exists access the first element [0], else evaluate to undefined.
req.files?.avatar[0]?.path ---> if req.files?.avatar[0] exists, it attempts to access path, if all properties in chain exists then path will be assigned, else null or undefined is assigned.

same goes with const coverImageLocalPath = req.files?.coverImage[0]?.path;

chaining optional operator : "?."
object?.property ---> if object exists, then access the property given

Mongodb assigns "_id" with every entry.


finding user by _id, if found then remove his password and refreshToken.

const createdUser = await User.findById(user._id).select(
  "-password -refreshToken"
)
.select() ---> specifies which doc fields to be included and excluded. "-" for excluded
remove password and refersh token after user found in database

--------------------------------------------------------------------------------------------------------------------
Access token are short lived, refresh token are long lived.

access token used to validate user, refresh token used to verify user and give new access token to user.

if login session expired, refresh token helps here. refresh token provided to user as well as databse.
everytime no need to enter password, if you have refresh token, hit an endpoint, from there if refresh token with user and database matches, then user will be provided new access token.

in user.controller.js
  // **NOTE: method access with "user" not with "User", because methods like findOne are mongodb methods, so they are applied on "User", methods created by us like isPasswordCorrect are applied on "user".

in user.controller.js
generateAccessAndRefreshToken() ---> finds user bu id, generates both tokens, saves the refresh token in database
returns both the tokens

below properties, make cookies un-modifiable from frontend, but modifiable from server.
httpOnly: true,
secure: true,

--------------------------------------------------------------------------------------------------------------------
auth.middleware.js
---> verify is user exists or not.
when we logged in, we were provided with refresh token and access token.
check whether user is sending accessToken with a cookie or request header, so check both "?."

JWT token ---> Authorization: Bearer <token>
  const token =
    req.cookies?.accessToken ||
    req.header("Authorization")?.replace("Bearer ", "");
most frequently you get Authorization header.
in header, we send {Authorization: Bearer} as key-value pair
if cookie or header contain access token, check for Authorization key in it,
if key found, replace bearer with empty string without space.
now store it in a token.

so now, eventually we have got a token's access into the varible "token"

if token not found in "token" throw error

now import jwt into auth.middleware.js

token can be generated but can be decoded only if he has secret key.
so verify token and access-token-secret-key and store it in "decodedToken" variable
jwt.verify()

await User.findById(decodedToken?._id).select("-password -refreshToken")
if user was found and token was decoded, remove password and refreshToken fields using .select() and store it in "user".
if "user" not found, throw new api error saying invalid access token.

add new object to this request and call next()

login verification done by --> auth middleware

--------------------------------------------------------------------------------------------------------------------
in user.controller.js for logoutUser functionality

find User by Id and set refreshToken to undefined, and set a new property "new" to true.
include options = {httpOnly, secure to true}
return response 200 and clear both access and refresh token cookies with options passed as arguments,
and return new api response "user logged out"
--------------------------------------------------------------------------------------------------------------------
access and refresh token --> purpose: user need not repeatedly give his email and password.
access token --> short lived. has an expiry. once expired, user needs to enter email and password and refresh the access token.
refreshToken ---> stored in database aswell, requested as and when wanted.

if user's access token has been expired, 401 request arises ---> hit an endpoint and get your access token refreshed from over there (new access token given)

how new token is recieved?

when you hit an endpoint, you send a refresh token with the request as well.
now your refresh token is compared with refreshtoken in database, if it matched, then a new session started and new access token is issued to user and refreshtoken gets updated and saved in database. 

accessToken expired --> hit and endpoint with refreshtoken in request --> refreshToken matched --> new Session --> new accessToken.


now create and endpoint in user.controller.js
--------------------------------------------------------------------------------------------------------------------
create subscription model file
--> create subscriptionschema and export as Subscription

subscription model ---> has id, subscriber(objectId users), channel(objectId users), createdAt, updatedAt

user.controller.js
changeCurrentPassword (async) ---> make the user change the currentPassword.
need to check whether user is logged in already or not.
take old password and new password from user

if user is able to change the password --> this means he is already logged in

pick up id from req.user and find user on the basis of the id and store it in user.
use isPasswordCorrect method on "user" and pass on the oldPassword into the method.
if password incorrect ---> throw error.
if password correct ---> set new password --> user.password = newpassword --> user.save({validateBeforeSave: false})
it takes time, so use await.
now before saving the new password ---> hash the password because the password was modified.
send user a message saying password change successfull

can also include confirm password, ---> match newpassword with confirm password ---> if mismatches then throw error.

File updating:
plugin multer middleware to accept files
allow only logged in users to update
--------------------------------------------------------------------------------------------------------------------

THEORY:

subscriptionSchema --> subscribers and channel
Users --> a,b,c,d,e
channel --> cac,hcc,fcc
above both are users only.

one user --> can subscribe to multiple channel
one channel --> can be subscribed by multiple users.
relation between a channel and user ---> maintained in a document object model.
each and every subscription by a user to a channel ---> creates a document object model.

to find out count of subscribers of a channel ---> select the documents in which your channel is present
--> number of docs in which your channel is present ---> gives the subscription count.

to find out count of channels a user has subscribed to ---> number of docs in which the user is present --> gives the user's subscribed count.

can also access the channel list of a user.
-----------------------------------------------------------------------------------------------------------------------------
join subscriptions with user ---> aggregation pipeline

Aggregation Pipeline :
--> consists of one or more stages that process documents:
--> each stage performs an operation on input documents.
--> docs that are output from a stage are passed to next stage.
--> aggr pipeline can return results for groups of docs.

db.name.aggregate( [
  stage 1
  {
    $randomName: { property: value }
  },
  stage 2
  {
    $randomName2: { property: value }
  }
])

[
  //pipeline1
  {}
  //pipeline2
  {}..
]
lookup ---> to know how both docs join
addFields --> to add new fields
[
  {
    $lookup: {
      from: "collection",
      localField: "field",
      foreignField: "field",
      as: "result"
    }
  },
  {
    $addFields: {
      newField: expression, ..
    }
  }
]
newField --> can be an array also --> newField :{ }
first value of result ---> example if result is array ---> result[0]

Usage of aggregation example
[
  {
    $lookup: {
      from: "authors",
      localField: "author_id",
      foreignField: "_id",
      as: "author_details"
    }
  },
  {
    $addFields: {
      author_details: {
        $arrayElemAt: ["$author_details", 0]
      }
    }
  }
]
check out addstage+ to checkout stages and fields and learn about them.

$project: passes along the docs with requested fields to next stage in pipeline. specified fields can be existing fields from input docs or newly computed fields.

user.controller.js

getUserChannelProfile ---> async function
--> extract username from req.params
--> to go to a profile we generally use the route /username
--> this username should be extracted from url so we use req.params
--> if req.params doesnt have any username evem after trimming ---> throw error username not found.
[ example: we want to go to profile sai-sathwik, the route for it is localhost:port/users/api/sai-sathwik, we want to extract sai-sathwik from given url using req.params.trim ---> if sai-sathwik not found then throw error ]

Conventional Way of Aggregation:
--> if we recieve any username from req.params --> by conventional way ---> we try and find the username in database using User.find({username}) --> get all user details --> then we apply Aggregation on the basis of user._id

AGGREGATION PIPELINE WAY:
--> we have $match field --> this will find our required document from all the docs automatically.

properties inside $project field which are marked 1 are projected .
$project: {
  username: 1,
  email: 1,.....
}

in channel = user.aggregate we have used $match, $lookup, $addFields, $project
$match gets only one user's profile.

-------------------------------------------------------------------------------------------------------------------------
INTERVIEW Specific: ****
what does req.user._id give? --> we get string which is ObjectId('655bc4d71....'),which is not a mongodb id.
if you actually need a mongodb id you need entire ObjectId('655bc4d71....')
but we are using mongoose --->so mongoose converts the string automatically into a mongodb id internally.

but if we want to convert manually, then use
User.aggregate([
  {
    $match: {
      _id: new mongoose.Types.ObjectId(req.user._id); // we get _id as mongodb object.
    }
  }
])

***
ObjectId ---> deprecated, so use ObjectId.createFromHexString(req.user._id) --> create an objectid from hexString representation of an objectId.
***

watchHistory is a object videos
in videos ---> owner object links to users.

lookup to videos first, then add a nested lookup to lookup to users, because videos point to users objectid.

---------------------------------------------------------------------------------------------------------------------
